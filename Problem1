/////
    Problem:

You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
             Total amount you can rob = 1 + 3 = 4.
Example 2:

Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
             Total amount you can rob = 2 + 9 + 1 = 12.
 

Constraints:

0 <= nums.length <= 100
0 <= nums[i] <= 400

//////



////Solution


class Solution {
    public int rob(int[] nums) {
        int[] dynarr = new int[nums.length];  // array to store optimum values for each instance (dynamic programming)
        int max=0;  //maximum loot possible
        
        if (nums==null)     //edge case 1 
            return max;
        
        
        for (int i=0;i<nums.length;i++)  //iterate through the argument array 
        {
              
            
            if ( (i==0) || (i==1) )   
                                        
              {

                //for 1st,2nd element, 
                //optimum value is the same as given array //

                  dynarr[i]=nums[i];    
                  

                  // assigning maximum for this case 

                  if(i==0)              
                      max=dynarr[i];        
                  
                  else
                      max= ((dynarr[1]>dynarr[0])?dynarr[1]:dynarr[0]);
                  
              }       
                  
              
              else if(i==2)
              {

                  //for 3rd element,
                  //adding 1st element from the optimal array to current value


                  dynarr[i]=nums[i]+dynarr[i-2];

                  //testing for max

                  max= ((dynarr[2]>dynarr[1])?dynarr[2]:dynarr[1]);
              }
                      
                  
                  
            
              else
              {
                  //for rest of the elements (from 4th element)
                  //adding the maximum of ( 2nd element and 3rd element before it ), to current value
                  

                  dynarr[i]= nums[i] + ((dynarr[i-2]>dynarr[i-3])?dynarr[i-2]:dynarr[i-3]);
                  
                  //testing for max 

                  if (dynarr[i]>max)
                      max=dynarr[i];
              }            
                           
              
              
        }
        
        //return the maximum value
        
        return max;
    }
}

///////
